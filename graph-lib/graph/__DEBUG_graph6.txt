Attempts:
* Splitting the define-graph macro in two: it's not enough.
* (datum->syntax) Commit 876c4d2: works, but introduces ~> into the global scope
* (syntax-local-introduce) Does not work at all
* ((make-delta-introducer) (syntax-local-introduce) 'add), see identifiers.ods and __DEBUG_graph6F.rkt and __DEBUG_graph6.delta-introducer.rkt: Works on normal identifiers but not for the graph, because the `:` identifier is not the same anymore, and graph doesn't recognize it:  define-graph: expected the identifier `:' or expected the identifier `new-:'  parsing context:  while parsing colon in: :
* (make-syntax-introducer) does not work, but I'm not sure I got it right.
* splicing-syntax-parameterize Commit 56fdfae: splicing-syntax-parameterize messes up the scopes of its body

Not tried yet:
* datum->syntax (or replace-context or â€¦) in define-graph, so that it "gobbles" its parameters?
* #:defined-please-bind-dammit (~>), so that a rename-transformer is introduced by define-graph
* defining ~> directly inside define-graph
* Make the simplest possible example that has the same structure (type-expander + several levels of macros).